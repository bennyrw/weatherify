{"version":3,"sources":["actions/index.tsx","views/Search.tsx","views/Loading.tsx","views/WeatherComponents.tsx","constants.tsx","views/Results.tsx","App.tsx","store/index.tsx","external/locationSearchApi.tsx","external/locationMapApi.tsx","external/weatherApi.tsx","sagas/index.tsx","index.tsx","reducers/index.tsx"],"names":["fetchForecastFailed","errorKey","type","payload","useStyles","makeStyles","theme","search","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","primary","main","form","width","location","submit","connect","dispatch","onSetLocation","setLocation","onSearch","props","React","useState","buttonEnabled","Boolean","styles","className","onSubmit","e","preventDefault","Avatar","fontSize","titleAccess","TextField","data-testid","name","variant","required","fullWidth","autoFocus","onChange","target","value","Button","color","disabled","Loading","CircularProgress","renderTemperatureUnitsToggleGridItem","useCentigrade","onToggleUnits","temperatureUnitsLabel","Grid","item","xs","component","container","Switch","checked","Typography","forecast","forecastDayIndex","isCentigrade","isSmallScreen","dailyWeather","get","formatTo1dp","n","Math","round","temperatureValue","temperatureInCentigrade","pressure","pressureInMillibars","Container","justify","alt","src","iconUrl","direction","DEBUG","TEXT","getText","key","locale","renderChangeDaySlider","onChangeDay","dayIndex","marks","map","weatherData","day","date","toLocaleString","weekday","label","Slider","slider","aria-label","toArray","min","max","size","Array","justifyContent","marginBottom","daysInFuture","changeDay","useMediaQuery","mapSize","locationMapUrl","resultPanel","overflow","error","isFetchingForecast","maxWidth","Alert","severity","renderError","Results","getInitialState","state","List","Date","now","getCoordinatesForLocation","a","fetch","getRequestUrl","response","json","length","longitude","Number","lon","latitude","lat","message","Error","encodeURI","getLocationMapURL","getTileInfo","x","y","z","blob","URL","createObjectURL","zoom","long2tile","lat2tile","floor","pow","log","tan","PI","cos","getLocationDailyWeather","maxDays","dailyData","daily","slice","parseDailyData","getIconUrl","weather","icon","dt","temp","fetchForecastSaga","fetchForecast","takeLatest","getLocation","select","call","coords","put","all","console","sagaMiddleware","createSagaMiddleware","initialState","store","createStore","action","undefined","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","run"],"mappings":"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","file":"static/js/main.efb604f7.chunk.js","sourcesContent":["import { Forecast } from '../types';\n\n//\n// Action constants\n//\n\nexport const SET_LOCATION = 'SET_LOCATION';\ntype SET_LOCATION = typeof SET_LOCATION;\n\nexport const FETCH_FORECAST = 'FETCH_FORECAST';\ntype FETCH_FORECAST = typeof FETCH_FORECAST;\n\nexport const FETCH_FORECAST_SUCCEEDED = 'FETCH_FORECAST_SUCCEEDED';\ntype FETCH_FORECAST_SUCCEEDED = typeof FETCH_FORECAST_SUCCEEDED;\n\nexport const FETCH_FORECAST_FAILED = 'FETCH_FORECAST_FAILED';\ntype FETCH_FORECAST_FAILED = typeof FETCH_FORECAST_FAILED;\n\nexport const CHANGE_DAY = 'CHANGE_DAY';\ntype CHANGE_DAY = typeof CHANGE_DAY;\n\nexport const CHANGE_UNITS = 'CHANGE_UNITS';\ntype CHANGE_UNITS = typeof CHANGE_UNITS;\n\n//\n// Action types\n//\n\nexport interface Action {\n    type: any;\n    payload?: any;\n}\n\nexport interface SetLocationAction extends Action {\n    type: SET_LOCATION;\n    payload: {\n        location: string;\n    }\n}\n\nexport interface FetchForecastAction extends Action {\n    type: FETCH_FORECAST;\n};\n\nexport interface FetchForecastSucceededAction extends Action {\n    type: FETCH_FORECAST_SUCCEEDED;\n    payload: {\n        forecast: Forecast,\n    }\n}\n\nexport interface FetchForecastFailedAction extends Action {\n    type: FETCH_FORECAST_FAILED;\n    payload: {\n        errorKey: string;\n    }\n}\n\nexport interface ChangeDayAction extends Action {\n    type: CHANGE_DAY;\n    payload: {\n        daysInFuture: number;\n    }\n}\n\nexport interface ChangeUnitsAction extends Action {\n    type: CHANGE_UNITS;\n    payload: {\n        isCentigrade: boolean;\n    }\n}\n\n//\n// Action creators\n//\n\nexport function setLocation(location: string): SetLocationAction {\n    return {\n        type: SET_LOCATION,\n        payload: {\n            location,\n        },\n    }\n}\n\nexport function fetchForecast(): FetchForecastAction {\n    return {\n        type: FETCH_FORECAST,\n    };\n}\n\nexport function fetchForecastSucceeded(forecast: Forecast): FetchForecastSucceededAction {\n    return {\n        type: FETCH_FORECAST_SUCCEEDED,\n        payload: {\n            forecast,\n        },\n    };\n}\n\nexport function fetchForecastFailed(errorKey: string): FetchForecastFailedAction {\n    return {\n        type: FETCH_FORECAST_FAILED,\n        payload: {\n            errorKey,\n        }\n    }\n}\n\nexport function changeDay(daysInFuture: number): ChangeDayAction {\n    return {\n        type: CHANGE_DAY,\n        payload: {\n            daysInFuture,\n        }\n    }\n}\n\nexport function changeUnits(isCentigrade: boolean): ChangeUnitsAction {\n    return {\n        type: CHANGE_UNITS,\n        payload: {\n            isCentigrade,\n        }\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LocationIcon from '@material-ui/icons/LocationOnOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { StoreState } from '../store';\nimport { fetchForecast, setLocation } from '../actions';\n\ninterface Props {\n  location?: string;\n  onSetLocation: (location: string) => void;\n  onSearch: () => void;\n}\n\n/**\n * Component for the search icon, input and button.\n */\nfunction Search(props: Props) {\n  const [location, setLocation] = React.useState(props.location || '');\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLocation(e.target.value);\n  }\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    // prevent page reload\n    e.preventDefault();\n\n    props.onSetLocation(location);\n    props.onSearch();\n  }\n\n  const buttonEnabled = Boolean(location);\n  const styles = useStyles();\n\n  return (\n    <div className={styles.search}>\n      <form className={styles.form} onSubmit={onSubmit}>\n        <Avatar className={styles.avatar}>\n          <LocationIcon fontSize=\"large\" titleAccess=\"enter location\" />\n        </Avatar>\n        <TextField\n          className={styles.location}\n          data-testid=\"search-location\"\n          name=\"location\"\n          variant=\"outlined\"\n          required\n          fullWidth\n          autoFocus\n          onChange={onChange}\n          value={location} />\n        <Button\n          className={styles.submit}\n          data-testid=\"search-button\"\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={!buttonEnabled}>\n          <SearchIcon titleAccess=\"search\" />\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  location: {\n  },\n  submit: {\n    margin: theme.spacing(0, 1),\n  },\n}));\n\nfunction mapStateToProps({ location }: StoreState) {\n  return {\n    location,\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    onSetLocation: (location: string) => dispatch(setLocation(location)),\n    onSearch: () => dispatch(fetchForecast()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n/**\n * Basic component to show loading is occurring. Currently just abstracts out a Material UI\n * component.\n */\nfunction Loading() {\n  return (\n    <CircularProgress />\n  );\n}\n\nexport default Loading;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport Typography from '@material-ui/core/Typography';\n\nimport { StoreState } from '../store';\nimport { changeUnits } from '../actions';\nimport { Forecast, WeatherData } from '../types';\n\ninterface Props {\n  isSmallScreen: boolean;\n  forecast?: Forecast;\n  forecastDayIndex: number;\n  useCentigrade: boolean;\n  onToggleUnits: (useCentigrade: boolean) => void;\n}\n\nconst CENTIGRADE_LABEL = '°C';\nconst FAHRENHEIT_LABEL = '°F';\n\n/**\n * Component that renders the weather sub-components - the temperature toggle, weather icon,\n * temperature and pressure. Supports responsive layout.\n */\nfunction WeatherComponents(props: Props) {\n  const { isSmallScreen, forecast, forecastDayIndex, useCentigrade } = props;\n\n  if (!forecast) {\n    return null;\n  }\n\n  const dailyWeather = forecast.dailyWeather.get(forecastDayIndex) as WeatherData;\n  const convertToFahrenheit = (centigrade: number) => (centigrade * 9 / 5) + 32;\n  const formatTo1dp = (n: number) => Math.round(10 * n) / 10;\n  const temperatureValue = useCentigrade ?\n    formatTo1dp(dailyWeather.temperatureInCentigrade) :\n    formatTo1dp(convertToFahrenheit(dailyWeather.temperatureInCentigrade));\n  const pressure = `${dailyWeather.pressureInMillibars} mB`;\n\n  // layout varies based on screen width\n  return (\n    <Container>\n      <Grid container>\n        {!isSmallScreen && renderTemperatureUnitsToggleGridItem(props)}\n        <Grid item xs={isSmallScreen ? 6 : 12}>\n          <Grid container justify=\"center\">\n            <img alt=\"weather icon\" src={dailyWeather.iconUrl} width=\"50%\" />\n          </Grid>\n        </Grid>\n        <Grid item xs={isSmallScreen ? 6 : 12}>\n          <Grid container justify=\"center\" alignItems=\"center\" spacing={3} direction={isSmallScreen ? 'column' : 'row'}>\n            <Grid item>\n              <Typography>{temperatureValue} {useCentigrade ? CENTIGRADE_LABEL : FAHRENHEIT_LABEL}</Typography>\n            </Grid>\n            <Grid item>\n              <Typography>{pressure}</Typography>\n            </Grid>\n            {isSmallScreen && renderTemperatureUnitsToggleGridItem(props)}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nfunction renderTemperatureUnitsToggleGridItem({ useCentigrade, onToggleUnits }: Props) {\n  const unitsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const useCentigrade = e.target.checked;\n    onToggleUnits(useCentigrade);\n  }\n\n  const temperatureUnitsLabel = useCentigrade ? CENTIGRADE_LABEL : FAHRENHEIT_LABEL;\n  return (\n    <Grid item xs={12}>\n      <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n        <Grid item>\n          <Switch checked={useCentigrade} onChange={unitsOnChange} />\n        </Grid>\n        <Grid item>\n          <Typography>{temperatureUnitsLabel}</Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction mapStateToProps({ forecast, forecastDayIndex, useCentigrade }: StoreState) {\n  return {\n    forecast,\n    forecastDayIndex,\n    useCentigrade,\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    onToggleUnits: (useCentigrade: boolean) => dispatch(changeUnits(useCentigrade)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherComponents);","import { Dictionary } from './types';\n\n/**\n * Toggle various debugging behaviours. Useful when getting layout right while the app is in particular states.\n */\nexport const DEBUG = {\n    MOCK_LOADING: false,\n    MOCK_FORECAST: false,\n    MOCK_ERROR: false,\n}\n\n/**\n * Max number of days of forecast weather shown.\n */\nexport const MAX_FORECAST_DAYS = 4;\n\n/**\n * The current locale. In future, could be set by user, taken from Accept Language header, etc.\n */\nexport const LOCALE = 'en-GB';\n\n/**\n * Translation database. Each language could be stored as a separate JSON file.\n * For each locale, keys imply the semantics of the message.\n */\nconst TEXT: Dictionary<Dictionary<string>> = {\n    'en-GB': {\n        'fetch-general-error': 'A problem occurred. Please try again.',\n        'fetch-location-not-found': \"Sorry, we couldn't find that location. Please try again.\",\n        'now': 'Now'\n    }\n};\n\n/**\n * Get the tranlsation for a given semantic message key.\n * @param key The message key/identifier.\n * @param locale The locale to use.\n */\nexport const getText = (key: string, locale = LOCALE) => TEXT[locale] && TEXT[locale][key];","import React from 'react';\nimport { connect } from 'react-redux';\nimport { List } from 'immutable';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { StoreState } from '../store';\nimport { Forecast } from '../types';\nimport WeatherComponents from './WeatherComponents';\nimport { changeDay } from '../actions';\nimport { getText, LOCALE } from '../constants';\n\ninterface Props {\n  forecast?: Forecast;\n  forecastDayIndex: number;\n  onChangeDay: (daysInFuture: number) => void;\n}\n\nfunction ResultsPanel(props: Props) {\n  const { forecast } = props;\n  const isSmallScreen = !useMediaQuery('(min-width:800px)');\n  const styles = useStyles();\n\n  if (!forecast) {\n    return null;\n  }\n\n  const mapSize = isSmallScreen ? '50%' : '100%';\n  const map = (\n    <div className={styles.map}>\n      <img alt=\"location map\" src={forecast.locationMapUrl} width={mapSize} />\n    </div>\n  );\n\n  // layout varies based on screen width\n  if (isSmallScreen) {\n    return (\n      <Container>\n        <WeatherComponents isSmallScreen={isSmallScreen} />\n        {renderChangeDaySlider(props, styles)}\n        {map}\n      </Container>\n    );\n  } else {\n    return (\n      <Container>\n        <Grid container justify=\"center\" direction=\"row\">\n          <Grid item xs={6}>\n            {map}\n          </Grid>\n          <Grid item xs={6}>\n            <WeatherComponents isSmallScreen={isSmallScreen} />\n          </Grid>\n        </Grid>\n        {renderChangeDaySlider(props, styles)}\n      </Container>\n    );\n  }\n}\n\ntype Styles = any;\n\nfunction renderChangeDaySlider({ forecast, forecastDayIndex, onChangeDay }: Props, styles: Styles) {\n  const sliderOnChange = (e: React.ChangeEvent<{}>, value: number | number[]) => {\n    const dayIndex = value instanceof Array ? value[0] : value;\n    onChangeDay(dayIndex);\n  }\n\n  // cast as it won't be undefined here as we've checked earlier\n  const dailyWeather = (forecast as Forecast).dailyWeather;\n  let dayIndex = 0;\n  const marks: List<Mark> = dailyWeather.map(weatherData => {\n    const day = dayIndex === 0 ?\n      getText('now') :\n      weatherData.date.toLocaleString(LOCALE, { weekday: 'short' });\n    return {\n      value: dayIndex++,\n      label: <Typography>{day}</Typography>\n    }\n  });\n\n  return <Slider\n    className={styles.slider}\n    aria-label='change day'\n    marks={marks.toArray()}\n    min={0}\n    max={dailyWeather.size - 1}\n    onChange={sliderOnChange}\n    value={forecastDayIndex} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  map: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  slider: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(6),\n  },\n}));\n\nfunction mapStateToProps({ forecast, forecastDayIndex }: StoreState) {\n  return {\n    forecast,\n    forecastDayIndex,\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    onChangeDay: (daysInFuture: number) => dispatch(changeDay(daysInFuture)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsPanel);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\n\nimport Search from './views/Search';\nimport Loading from './views/Loading';\nimport Results from './views/Results';\n\nimport { StoreState } from './store';\nimport { Forecast } from './types';\nimport { getText } from './constants';\n\ninterface Props {\n  isFetchingForecast: boolean;\n  forecast?: Forecast;\n  errorKey?: string;\n}\n\n/**\n * Top level UI component.\n */\nfunction App({ isFetchingForecast, forecast, errorKey }: Props) {\n  const styles = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xl\">\n      <Search />\n      {errorKey && renderError(errorKey, styles)}\n      <div className={styles.resultPanel}>\n        {isFetchingForecast && <Loading />}\n        {!isFetchingForecast && forecast && <Results />}\n      </div>\n    </Container>\n  );\n}\n\ntype Styles = any;\n\nfunction renderError(errorKey: string, styles: Styles) {\n  return (\n    <div className={styles.error}>\n      <Alert severity=\"error\">{getText(errorKey)}</Alert>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  resultPanel: {\n    marginTop: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  error: {\n    marginTop: theme.spacing(4),\n  }\n}));\n\nfunction mapStateToProps({ isFetchingForecast, forecast, errorKey }: StoreState) {\n  return {\n    isFetchingForecast,\n    forecast,\n    errorKey,\n  }\n}\n\nexport default connect(mapStateToProps)(App);","import { List } from 'immutable';\n\nimport { Forecast } from '../types';\nimport { DEBUG } from '../constants';\n\nexport interface StoreState {\n    /**\n     * Set if an error occurred that the user might want to know about.\n     */\n    errorKey?: string;\n    /**\n     * The current location, if any has been set.\n     */\n    location?: string;\n    /**\n     * Whether we're currently fetching data for the forecast.\n     */\n    isFetchingForecast: boolean;\n    /**\n     * The day of the forecast to display, indexed from 0.\n     */\n    forecastDayIndex: number;\n    /**\n     * Whether to use centigrade for the temperature units.\n     */\n    useCentigrade: boolean;\n    /**\n     * Forecast data, if we've received any.\n     */\n    forecast?: Forecast;\n}\n\nexport function getInitialState(): StoreState {\n    const state: StoreState = {\n        isFetchingForecast: false,\n        forecastDayIndex: 0,\n        useCentigrade: true,\n    };\n\n    // Support various debugging behaviours. Useful when getting layout right while the app is in particular states.\n    if (DEBUG.MOCK_LOADING) {\n        state.isFetchingForecast = true;\n    } else if (DEBUG.MOCK_FORECAST) {\n        state.location = 'Cambridge';\n        state.forecast = {\n            locationMapUrl: 'https://a.tile.openstreetmap.org/12/2049/1349.png',\n            dailyWeather: List([\n                {\n                    iconUrl: 'http://openweathermap.org/img/wn/10d@2x.png',\n                    date: new Date(),\n                    temperatureInCentigrade: 37.5,\n                    pressureInMillibars: 1023,\n                },\n                {\n                    iconUrl: 'http://openweathermap.org/img/wn/01d@2x.png',\n                    date: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000),\n                    temperatureInCentigrade: 21.0,\n                    pressureInMillibars: 1000,\n                },\n                {\n                    iconUrl: 'http://openweathermap.org/img/wn/04d@2x.png',\n                    date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),\n                    temperatureInCentigrade: 14.5,\n                    pressureInMillibars: 980,\n                }\n            ])\n        };\n    } else if (DEBUG.MOCK_ERROR) {\n        state.errorKey = 'fetch-general-error';\n    }\n\n    return state;\n}","/**\n * Get the longitude and latitude for a given location.\n * Returns null if the location isn't found.\n */\nexport async function getCoordinatesForLocation(location: string): Promise<Coordinates | null> {\n    let error;\n    try {\n        const response = await fetch(getRequestUrl(location));\n        const json = await response.json();\n        if (json.length === 1) {\n            return {\n                longitude: Number(json[0].lon),\n                latitude: Number(json[0].lat),\n            };\n        } else {\n            return null;\n        }\n    } catch (e) {\n        error = e.message;\n    }\n\n    throw new Error(`Failed to find coordinates for location ${location}${error ? \", error: \" + error : ''}`);\n}\n\nexport type Coordinates = {\n    longitude: number;\n    latitude: number;\n}\n\n// https://nominatim.org/release-docs/develop/api/Search/\nconst getRequestUrl = (location: string) =>\n    `https://nominatim.openstreetmap.org/search?q=${encodeURI(location)}&format=json&limit=1`;","const ZOOM_LEVEL = 12;\n\n/**\n * Get a URL that corresponds to a map of the given longitude and latitude and is\n * suitable for use in an <img> src attribute.\n * @param longitude \n * @param latitude \n * @return URL, currently a blob but could alternatively be a base64 image.\n */\nexport async function getLocationMapURL(longitude: number, latitude: number): Promise<string> {\n    try {\n        const { x, y, z } = getTileInfo(longitude, latitude, ZOOM_LEVEL);\n\n        const response = await fetch(getRequestUrl(x, y, z));\n        const blob = await response.blob();\n        // blob will persist for this session\n        return URL.createObjectURL(blob);\n    } catch (e) {\n        throw new Error(`Error occurred getting location map: ${e.message}`);\n    }\n}\n\n// https://wiki.openstreetmap.org/wiki/Tiles\nconst getRequestUrl = (x: number, y: number, z: number) =>\n    `https://a.tile.openstreetmap.org/${z}/${x}/${y}.png`;\n\n/**\n * Get the tile x & y co-ordinates for a given longitude and latitude\n */\nfunction getTileInfo(longitude: number, latitude: number, zoom: number) {\n    return {\n        x: long2tile(longitude, zoom),\n        y: lat2tile(latitude, zoom),\n        z: zoom,\n    }\n}\n\n// OSM helper methods from https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\nfunction long2tile(longitude: number, zoom: number) {\n    return Math.floor((longitude + 180) / 360 * Math.pow(2, zoom));\n}\nfunction lat2tile(latitude: number, zoom: number) {\n    return Math.floor(\n        (1 - Math.log(Math.tan(latitude * Math.PI / 180) + 1\n            /\n            Math.cos(latitude * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom)\n    );\n}\n","import { List } from 'immutable';\n\nimport { WeatherData } from '../types';\n\n/**\n * Get the upcoming daily weather for a specific location.\n * @param longitude\n * @param latitude \n * @param maxDays The maximum days of forecasted weather.\n * @return Promise yielding the forecasted weather.\n */\nexport async function getLocationDailyWeather(longitude: number, latitude: number,\n    maxDays: number): Promise<List<WeatherData>> {\n\n    try {\n        const response = await fetch(getRequestUrl(longitude, latitude));\n        const json = await response.json();\n        const dailyData = json.daily as Array<ApiDailyData>\n\n        return List(dailyData.slice(0, maxDays).map(parseDailyData));\n    } catch (e) {\n        throw new Error(`Failed to get weather for location, error: ${e.message}`);\n    }\n}\n\ntype ApiWeatherItem = {\n    // icon code for the weather\n    icon: string;\n}\n\ntype ApiDailyData = {\n    // unix timestamp of forecast, UTC\n    dt: number;\n    temp: {\n        // temperature during the day time in centigrade\n        day: number;\n    }\n    // atmospheric pressure in millibars\n    pressure: number;\n    // prevailing weather information (single length array)\n    weather: Array<ApiWeatherItem>;\n\n    // many more fields available: https://openweathermap.org/api/one-call-api\n}\n\nfunction parseDailyData(dailyData: ApiDailyData): WeatherData {\n    return {\n        iconUrl: getIconUrl(dailyData.weather[0].icon),\n        date: new Date(dailyData.dt * 1000),\n        temperatureInCentigrade: dailyData.temp.day,\n        pressureInMillibars: dailyData.pressure,\n    }\n}\n\nconst getIconUrl = (icon: string) =>\n    `http://openweathermap.org/img/wn/${icon}@2x.png`;\n\n// In production you'd take more care over this key, e.g. if using an authenticated backend\n// of your own, have that make the API call instead of the client JS. Additional options here:\n// https://developers.google.com/maps/api-key-best-practices\nconst API_KEY = 'e56d308d4e223c8749d63fe32d8b8442';\n\nconst getRequestUrl = (longitude: number, latitude: number) =>\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`;","import { select, call, put, all, takeLatest } from 'redux-saga/effects';\n\nimport { FETCH_FORECAST, fetchForecastSucceeded, fetchForecastFailed } from '../actions';\nimport { StoreState } from '../store';\nimport { getCoordinatesForLocation } from '../external/locationSearchApi';\nimport { getLocationMapURL } from '../external/locationMapApi'\nimport { getLocationDailyWeather } from '../external/weatherApi';\nimport { MAX_FORECAST_DAYS } from '../constants';\nimport { SagaIterator } from 'redux-saga';\n\n/**\n * Triggered when a FETCH_FORECAST action is fired, this saga retrieves the location\n * from the store and fetches the required data (world coordinates then map and weather).\n */\nexport function* fetchForecastSaga() {\n    // don't allow concurrent requests\n    yield takeLatest(FETCH_FORECAST, fetchForecast);\n}\n\nconst getLocation = (state: StoreState) => state.location;\n\nfunction* fetchForecast(): SagaIterator {\n    try {\n        const location = yield select(getLocation);\n        const coords = yield call(getCoordinatesForLocation, location);\n        if (!coords) {\n            return yield put(fetchForecastFailed('fetch-location-not-found'));\n        }\n        const { longitude, latitude } = coords;\n\n        // get the map and weather in parallel now we know the coordinates\n        const [locationMapUrl, dailyWeather] = yield all([\n            call(getLocationMapURL, longitude, latitude),\n            call(getLocationDailyWeather, longitude, latitude, MAX_FORECAST_DAYS)\n        ]);\n\n        return yield put(fetchForecastSucceeded({\n            locationMapUrl,\n            dailyWeather,\n        }));\n    } catch (e) {\n        console.error(e.message);\n        return yield put(fetchForecastFailed('fetch-general-error'));\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport App from './App';\nimport { reducer } from './reducers';\nimport { StoreState, getInitialState } from './store';\nimport { Action } from './actions';\nimport { fetchForecastSaga } from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst initialState = getInitialState();\nconst store = createStore<StoreState, Action, any, any>(reducer,\n  initialState,\n  applyMiddleware(sagaMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nsagaMiddleware.run(fetchForecastSaga);","import {\n    Action, SET_LOCATION, FETCH_FORECAST, FETCH_FORECAST_SUCCEEDED, FETCH_FORECAST_FAILED, CHANGE_DAY, CHANGE_UNITS,\n    FetchForecastFailedAction, ChangeDayAction, ChangeUnitsAction, FetchForecastSucceededAction, SetLocationAction\n} from '../actions/index';\nimport { getInitialState, StoreState } from '../store';\n\n/**\n * Redux reducer that updates the store state with the consequences of an action.\n * @param state The current state.\n * @param action The action that will mutate the state.\n * @return The new state.\n */\nexport function reducer(state = getInitialState(), action: Action): StoreState {\n    switch (action.type) {\n        case SET_LOCATION: {\n            const { payload: { location } } = action as SetLocationAction;\n            return { ...state, location: location };\n        }\n        case FETCH_FORECAST: {\n            if (state.location) {\n                return { ...state, isFetchingForecast: true, errorKey: undefined };\n            } else {\n                // no location set yet\n                return state;\n            }\n        }\n        case FETCH_FORECAST_SUCCEEDED: {\n            const { payload: { forecast } } = action as FetchForecastSucceededAction;\n            return { ...state, isFetchingForecast: false, forecast };\n        }\n        case FETCH_FORECAST_FAILED: {\n            const { payload: { errorKey } } = action as FetchForecastFailedAction;\n            return { ...state, isFetchingForecast: false, errorKey, forecast: undefined };\n        }\n        case CHANGE_DAY: {\n            const { payload: { daysInFuture } } = action as ChangeDayAction;\n            return { ...state, forecastDayIndex: daysInFuture };\n        }\n        case CHANGE_UNITS: {\n            const { payload: { isCentigrade } } = action as ChangeUnitsAction;\n            return { ...state, useCentigrade: isCentigrade };\n        }\n    }\n    return state;\n}"],"sourceRoot":""}